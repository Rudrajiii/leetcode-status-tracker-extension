<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LeetCode Status</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Glassmorphism effect */
        .glass {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 20px;
        }
        /* Smooth fade-in animation */
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="bg-gray-900 text-white flex items-center justify-center h-screen">
    <div class="glass w-full max-w-md text-center p-8 fade-in">
        <h1 class="text-2xl font-bold">LeetCode Status</h1>
        <div id="status" class="mt-4 text-lg font-semibold">
            Loading status...
        </div>
    </div>
    
    <!-- Include Socket.io client library -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Global variables
        let lastOnlineTimestamp = null;
        let timerInterval = null;
        let userStatus = null;
        
        // Function to calculate and display time since last online
        function updateTimeAgo() {
            if (!lastOnlineTimestamp) return "Unknown";
            
            const diffSeconds = Math.floor((Date.now() - lastOnlineTimestamp) / 1000);
            let timeAgoText = "";
            
            if (diffSeconds < 60) {
                timeAgoText = `${diffSeconds} seconds ago`;
            } else if (diffSeconds < 3600) {
                timeAgoText = `${Math.floor(diffSeconds / 60)} minutes ago`;
            } else if (diffSeconds < 86400) {
                timeAgoText = `${Math.floor(diffSeconds / 3600)} hours ago`;
            } else {
                timeAgoText = `${Math.floor(diffSeconds / 86400)} days ago`;
            }
            
            const lastOnlineElement = document.getElementById('lastOnline');
            if (lastOnlineElement) {
                lastOnlineElement.innerText = timeAgoText;
            }
            
            return timeAgoText;
        }
        
        // Function to update the UI based on status
        function updateUI(data) {
            userStatus = data;
            const statusDiv = document.getElementById('status');
            
            if (data.status === 'online') {
                statusDiv.innerHTML = '<span class="text-green-400">üü¢ Online</span>';
                
                // Clear the interval if it exists
                if (timerInterval) {
                    clearInterval(timerInterval);
                    timerInterval = null;
                }
            } else {
                // Set the timestamp
                lastOnlineTimestamp = data.last_online;
                
                // Create the offline display with timer
                const timeAgoText = updateTimeAgo();
                statusDiv.innerHTML = `<span class="text-red-400">üî¥ Last Online: <span id="lastOnline">${timeAgoText}</span></span>`;
                
                // Start the timer if not already running
                if (!timerInterval) {
                    timerInterval = setInterval(updateTimeAgo, 1000);
                }
            }
        }
        
        // Function to fetch the status from the server
        async function fetchStatus() {
            try {
                const response = await fetch('/status');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                updateUI(data);
            } catch (error) {
                console.error('Error fetching status:', error);
                document.getElementById('status').innerHTML = '<span class="text-red-500">‚ùå Error connecting to server</span>';
            }
        }
        
        // Initialize Socket.io connection
        const socket = io({
            reconnectionAttempts: Infinity,
            reconnectionDelay: 1000,
            timeout: 10000
        });
        
        // Socket event handlers
        socket.on('connect', () => {
            console.log('Connected to WebSocket server');
        });
        
        socket.on('disconnect', () => {
            console.log('Disconnected from WebSocket server');
        });
        
        socket.on('connect_error', (error) => {
            console.error('Connection error:', error);
        });
        
        socket.on('statusUpdate', (data) => {
            console.log('Received status update:', data);
            updateUI(data);
        });
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', fetchStatus);
        
        // When the page becomes visible again, refresh the status
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible') {
                console.log('Page became visible, refreshing status...');
                fetchStatus();
            }
        });
        
        // Handle beforeunload to potentially clean up
        window.addEventListener('beforeunload', () => {
            if (timerInterval) {
                clearInterval(timerInterval);
            }
        });
    </script>
</body>
</html>